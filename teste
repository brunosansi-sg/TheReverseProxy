#!/bin/bash

# Fun√ß√£o para exibir texto colorido
print_status() {
    case $1 in
        "info") echo -e "\e[33m[INFO] $2\e[0m" ;;
        "success") echo -e "\e[32m[INFO] ‚úÖ $2\e[0m" ;;
        "error") echo -e "\e[31m[ERRO] ‚ùå $2\e[0m" ;;
        "warning") echo -e "\e[33m[AVISO] ‚ö†Ô∏è $2\e[0m" ;;
    esac
}

# Fun√ß√£o para exibir spinner de carregamento
show_spinner() {
    local pid=$1
    local delay=0.1
    local spinstr='‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

# Verifica se est√° sendo executado como root
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        print_status "error" "Este script precisa ser executado como root."
        print_status "info" "Tentando executar com sudo..."
        if ! sudo "$0" "$@"; then
            print_status "error" "Falha ao executar com sudo. Execute manualmente como root."
            exit 1
        fi
        exit 0
    fi
}

# Fun√ß√£o para verificar conex√£o com a internet
check_internet() {
    print_status "info" "Verificando conex√£o com a internet..."
    if ! ping -c 1 8.8.8.8 &> /dev/null; then
        print_status "error" "Sem conex√£o com a internet. Verifique sua conex√£o."
        exit 1
    fi
    print_status "success" "Conex√£o com a internet estabelecida."
}

# Fun√ß√£o para verificar e instalar pacotes necess√°rios
check_and_install() {
    local PACKAGE=$1
    if ! command -v "$PACKAGE" &> /dev/null; then
        print_status "info" "$PACKAGE n√£o encontrado. Instalando..."
        (apt-get update -y > /dev/null && apt-get install "$PACKAGE" -y > /dev/null) &
        show_spinner $!
        if ! command -v "$PACKAGE" &> /dev/null; then
            print_status "error" "Falha ao instalar $PACKAGE."
            exit 1
        fi
        print_status "success" "$PACKAGE instalado com sucesso."
    else
        print_status "success" "$PACKAGE j√° est√° instalado."
    fi
}

# Fun√ß√£o para verificar hardware
check_hardware() {
    print_status "info" "Verificando hardware do sistema..."
    
    # CPU
    local cpu_cores=$(nproc)
    local cpu_model=$(cat /proc/cpuinfo | grep "model name" | head -n1 | cut -d ":" -f2 | sed 's/^[ \t]*//')
    echo -e "\e[36müíª CPU: $cpu_model\e[0m"
    echo -e "\e[36müî¢ Cores: $cpu_cores\e[0m"
    
    # RAM
    local total_ram=$(free -h | awk '/^Mem:/{print $2}')
    local available_ram=$(free -h | awk '/^Mem:/{print $7}')
    echo -e "\e[36müéÆ RAM Total: $total_ram\e[0m"
    echo -e "\e[36müìä RAM Dispon√≠vel: $available_ram\e[0m"
    
    # GPU
    echo -e "\e[36müéÆ Verificando GPUs...\e[0m"
    if command -v nvidia-smi &> /dev/null; then
        print_status "success" "GPU NVIDIA detectada:"
        nvidia-smi --query-gpu=gpu_name,memory.total,driver_version --format=csv,noheader | \
        while IFS=, read -r name memory driver; do
            echo -e "\e[36m   üìé Nome: $name\e[0m"
            echo -e "\e[36m   üìé Mem√≥ria: $memory\e[0m"
            echo -e "\e[36m   üìé Driver: $driver\e[0m"
        done
    elif command -v rocm-smi &> /dev/null; then
        print_status "success" "GPU AMD detectada:"
        rocm-smi --showproductname --showmeminfo
    else
        print_status "warning" "Nenhuma GPU dedicada detectada."
    fi
    
    echo -e "\n\e[33mPressione ENTER para continuar...\e[0m"
    read -r
}

# Fun√ß√£o para o menu interativo
choose_crypto() {
    while true; do
        clear
        echo -e "\e[34m"
        cat << "EOF"
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ        RIGEL MINER INSTALLER         ‚îÇ
‚îÇ            Version 2.0               ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
EOF
        echo -e "\e[0m"

        echo -e "\e[33mEscolha a Criptomoeda para Minera√ß√£o:\e[0m\n"
        echo -e "\e[32m1) üíé Ergo        - Algoritmo: Autolykos2"
        echo -e "\e[32m2) üåü Conflux     - Algoritmo: Octopus"
        echo -e "\e[32m3) ü¶Ö Ravencoin   - Algoritmo: KawPoW"
        echo -e "\e[32m4) ‚ö° Xelis       - Algoritmo: XelisHashV2"
        echo -e "\e[31m5) ‚ùå Sair\e[0m"
        echo ""
        
        # Remover qualquer entrada pendente
        read -t 0.1 -n 100 || true
        
        # Ler a entrada do usu√°rio
        echo -ne "\e[33mDigite o n√∫mero correspondente e pressione ENTER: \e[0m"
        read -r CHOICE

        case "${CHOICE}" in
            "1")
                ALGO="autolykos2"
                POOL="stratum+tcp://3.136.83.153:8443"
                WALLET="9f9RuWUmD6e2UaKauEhCsMxLZd4tHDXVVEZU4KRcUTSBuakJcBL.A-1"
                COIN_NAME="Ergo"
                break
                ;;
            "2")
                ALGO="octopus"
                POOL="stratum+tcp://13.58.204.114:8443"
                WALLET="cfx:aarzu38kp8knupgnhmsnzn6jusdhrrzfgexz7ryae9.A-1"
                COIN_NAME="Conflux"
                break
                ;;
            "3")
                ALGO="kawpow"
                POOL="stratum+tcp://13.58.204.114:8444"
                WALLET="RSeF8H6Qcz7hE81LjtxMppESaPwvqbDFAe.A-1"
                COIN_NAME="Ravencoin"
                break
                ;;
            "4")
                ALGO="xelishashv2"
                POOL="stratum+tcp://13.58.204.114:8445"
                WALLET="xel:aee43hxxe8tzl0lrjq25dsj8rhvev2jseeyk6xydx9ltuj4fyezqzqspqyrx6etddaykgqq9qqqqryak32nqxj4mn8d.A-1"
                COIN_NAME="Xelis"
                break
                ;;
            "5")
                echo -e "\e[31mSaindo do programa...\e[0m"
                exit 0
                ;;
            *)
                echo -e "\e[31m[ERRO] ‚ùå Escolha inv√°lida. Tente novamente.\e[0m"
                sleep 2
                continue
                ;;
        esac
    done

    echo -e "\n\e[32m[INFO] ‚úÖ Criptomoeda selecionada: $COIN_NAME"
    echo -e "[INFO] ‚úÖ Algoritmo: $ALGO"
    echo -e "[INFO] üìù Carteira: $WALLET\e[0m"
    
    echo -e "\n\e[33mPressione ENTER para continuar...\e[0m"
    read -r
}

# Fun√ß√£o para instalar o Rigel Miner
install_rigel_miner() {
    print_status "info" "üöÄ Iniciando instala√ß√£o do Rigel Miner..."
    
    REPO="rigelminer/rigel"
    INSTALL_DIR="/opt/rigel-miner"
    
    mkdir -p "$INSTALL_DIR"
    cd "$INSTALL_DIR" || exit 1
    
    print_status "info" "Obtendo a √∫ltima vers√£o do Rigel Miner..."
    LATEST_VERSION=$(curl -s "https://api.github.com/repos/$REPO/releases/latest" | grep '"tag_name":' | sed -E 's/.*\"([^\"]+)\".*/\1/')
    if [ -z "$LATEST_VERSION" ]; then
        print_status "error" "N√£o foi poss√≠vel obter a √∫ltima vers√£o do Rigel Miner."
        exit 1
    fi
    print_status "success" "√öltima vers√£o encontrada: $LATEST_VERSION"
    
    CLEAN_VERSION=${LATEST_VERSION#v}
    DOWNLOAD_URL="https://github.com/$REPO/releases/download/$LATEST_VERSION/rigel-${CLEAN_VERSION}-linux.tar.gz"
    
    print_status "info" "Baixando o Rigel Miner..."
    if ! wget -q --show-progress "$DOWNLOAD_URL" -O rigel-latest-linux.tar.gz; then
        print_status "error" "Falha ao baixar o Rigel Miner."
        exit 1
    fi
    
    print_status "info" "Extraindo o Rigel Miner..."
    if ! tar -xf rigel-latest-linux.tar.gz; then
        print_status "error" "Falha ao extrair o Rigel Miner."
        exit 1
    fi
    
    FOLDER_NAME="rigel-${CLEAN_VERSION}-linux"
    if [ ! -d "$FOLDER_NAME" ]; then
        print_status "error" "Pasta extra√≠da n√£o encontrada ($FOLDER_NAME)."
        exit 1
    fi
    
    mv "$FOLDER_NAME"/* .
    rm -rf "$FOLDER_NAME" rigel-latest-linux.tar.gz
    chmod +x rigel
    
    print_status "success" "Rigel Miner vers√£o $LATEST_VERSION instalado com sucesso!"
}

# Fun√ß√£o para iniciar o minerador
start_miner() {
    print_status "info" "Configurando e iniciando o minerador..."
    
    # Instalar screen se n√£o estiver instalado
    check_and_install screen
    
    # Parar qualquer inst√¢ncia anterior
    pkill -f "screen -dmS gpu" >/dev/null 2>&1 || true
    
    print_status "info" "Iniciando o Rigel Miner na sess√£o 'gpu'..."
    cd /opt/rigel-miner || exit 1
    
    # Iniciar o minerador em uma sess√£o screen
    screen -dmS gpu ./rigel -a "$ALGO" -o "$POOL" -u "$WALLET" -p x
    
    # Verificar se o screen foi iniciado corretamente
    if screen -list | grep -q "gpu"; then
        print_status "success" "Minerador iniciado com sucesso!"
        echo -e "\e[33mComandos √∫teis:\e[0m"
        echo -e "\e[36m   üìé Ver sess√£o do minerador: screen -r gpu\e[0m"
        echo -e "\e[36m   üìé Sair da sess√£o (sem parar): Ctrl+A, depois D\e[0m"
        echo -e "\e[36m   üìé Listar sess√µes: screen -ls\e[0m"
        echo -e "\e[36m   üìé Parar minerador: screen -X -S gpu quit\e[0m"
    else
        print_status "error" "Falha ao iniciar o minerador."
        exit 1
    fi
}

# Fun√ß√£o para limpeza
cleanup() {
    print_status "info" "Limpando instala√ß√£o anterior..."
    pkill -f "screen -dmS gpu" >/dev/null 2>&1 || true
    rm -rf /opt/rigel-miner
    print_status "success" "Limpeza conclu√≠da."
}

# Fun√ß√£o para tratar interrup√ß√µes
trap_handler() {
    echo ""
    print_status "error" "Interrompendo instala√ß√£o..."
    cleanup
    exit 1
}

# Configurar trap para SIGINT e SIGTERM
trap trap_handler SIGINT SIGTERM

# Fun√ß√£o principal
main() {
    clear
    check_root
    check_internet
    
    print_status "info" "Verificando depend√™ncias..."
    check_and_install wget
    check_and_install curl
    check_and_install tar
    
    check_hardware
    choose_crypto
    
    cleanup
    install_rigel_miner
    start_miner
    
    echo -e "\n\e[32m‚ú® Instala√ß√£o conclu√≠da com sucesso! ‚ú®\e[0m"
    echo -e "\n\e[35müíé Bom Mineiramento! üíé\e[0m"
    echo -e "\n\e[33mPara ver o status do minerador, use: screen -r gpu\e[0m"
}

# Executa o script principal
main
